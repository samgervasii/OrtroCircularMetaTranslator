1st IDEA: same as the 3rd one but rev_i has the same function of rev_stmt(3rd)

compound_stmt
    : IF cond=test COLON suite elif_clause* else_clause?                             #if_stmt
    | WHILE test COLON suite else_clause?                                            #while_stmt
    | ASYNC? FOR exprlist IN testlist COLON suite else_clause?                       #for_stmt
    | TRY COLON suite (except_clause+ else_clause? finally_clause? | finally_clause) #try_stmt
    | ASYNC? WITH with_item (COMMA with_item)* COLON suite                           #with_stmt
    | decorator* (classdef | funcdef)                                                #class_or_func_def_stmt
    | REV COLON revblock                                                             #rev_stmt  //Gervasi Samuele
    ;

revblock //same as suite but we can manipulate directly the reversible block                   Gervasi Samuele
    : rev_i      //rev_i, we'll keep this from suite because we can eventually have the syntax "rev: instruction"
    | LINE_BREAK INDENT rev_i+ DEDENT     
    ;

rev_i //instruction that are reversible Gervasi Samuele
    : testlist_star_expr reversible_assign?       #rev_assign
;

reversible_assign //Gervasi Samuele
    : op=( ADD_ASSIGN
         | SUB_ASSIGN
         | MULT_ASSIGN
         | AT_ASSIGN
         | DIV_ASSIGN
         | MOD_ASSIGN
         | AND_ASSIGN
         | OR_ASSIGN
         | XOR_ASSIGN
         | LEFT_SHIFT_ASSIGN
         | RIGHT_SHIFT_ASSIGN
         | POWER_ASSIGN
         | IDIV_ASSIGN
         )
      (yield_expr | testlist)
    ;



___________________________________________________________________________________________________________________________________________________________________________________________________________________________






2nd IDEA:

stmt
    : simple_stmt
    | compound_stmt
    | rev_stmt //Gervasi Samuele
    ;


rev_stmt //Gervasi Samuele
    : REV rev_i 
    | REV COLON rev_block
    ; 

rev_i //reversible instruction Gervasi Samuele
    : testlist_star_expr rev_assign (yield_expr | testlist) LINE_BREAK 
    ;

rev_assign //reversible assignment Gervasi Samuele
    : op=( ADD_ASSIGN
         | SUB_ASSIGN
         | MULT_ASSIGN
         | AT_ASSIGN
         | DIV_ASSIGN
         | MOD_ASSIGN
         | AND_ASSIGN
         | OR_ASSIGN
         | XOR_ASSIGN
         | LEFT_SHIFT_ASSIGN
         | RIGHT_SHIFT_ASSIGN
         | POWER_ASSIGN
         | IDIV_ASSIGN
         )
    ;

rev_block //Gervasi Samuele
    : LINE_BREAK INDENT rev_i+ DEDENT 
    ;




_____________________________________________________________________________________________________________________________________________________________________________________




3rd IDEA: working but not optimal


stmt
    : simple_stmt
    | compound_stmt
    | rev_stmt //Gervasi Samuele
    ;

compound_stmt
    : IF cond=test COLON suite elif_clause* else_clause?                             #if_stmt
    | WHILE test COLON suite else_clause?                                            #while_stmt
    | ASYNC? FOR exprlist IN testlist COLON suite else_clause?                       #for_stmt
    | TRY COLON suite (except_clause+ else_clause? finally_clause? | finally_clause) #try_stmt
    | ASYNC? WITH with_item (COMMA with_item)* COLON suite                           #with_stmt
    | decorator* (classdef | funcdef)                                                #class_or_func_def_stmt
    | REV COLON rev_block                                                            #rev_block_stmt //Gervasi Samuele
    ;

rev_stmt //Gervasi Samuele
    : testlist_star_expr rev_assign (yield_expr | testlist) LINE_BREAK 
    ;


rev_assign //reversible assignment Gervasi Samuele
    : op=( ADD_ASSIGN
         | SUB_ASSIGN
         | MULT_ASSIGN
         | AT_ASSIGN
         | DIV_ASSIGN
         | MOD_ASSIGN
         | AND_ASSIGN
         | OR_ASSIGN
         | XOR_ASSIGN
         | LEFT_SHIFT_ASSIGN
         | RIGHT_SHIFT_ASSIGN
         | POWER_ASSIGN
         | IDIV_ASSIGN
         )
    ;

rev_block //Gervasi Samuele
    : rev_stmt
    | LINE_BREAK INDENT rev_stmt+ DEDENT 
    ;



___________________________________________________________________________________________________________



IDEAS FOR WHILE LOOP:

        
       
ASSERT test (COMMA test)? WHILE TRUE COLON rev_block IF cond=test COLON BREAK rev_block ASSERT test (COMMA test)? LINE_BREAK #pablo                                            



